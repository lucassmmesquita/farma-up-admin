// prisma/schema.prisma (versão corrigida)
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id                   String                @id @default(uuid())
  nome                 String
  email                String                @unique
  senha                String
  perfil               String
  ativo                Boolean               @default(true)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  farmaciasUsuario     FarmaciaUsuario[]
  planos               PlanoAcao[]
  comentarios          Comentario[]
  evidencias           Evidencia[]
  comentariosEvidencia ComentarioEvidencia[] // Adicionando relação inversa
}

model Farmacia {
  id                 String            @id @default(uuid())
  nome               String
  cnpj               String            @unique
  endereco           String?
  telefone           String?
  email              String?
  corPrincipal       String            @default("#2E7D32")
  corSecundaria      String            @default("#FF5722")
  logo               String?
  ativo              Boolean           @default(true)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  usuariosAssociados FarmaciaUsuario[]
  planosAcao         PlanoAcao[]
  evidencias         Evidencia[]
  medicamentos       Medicamento[]
}

model FarmaciaUsuario {
  id         String   @id @default(uuid())
  farmaciaId String
  usuarioId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  farmacia   Farmacia @relation(fields: [farmaciaId], references: [id], onDelete: Cascade)
  usuario    Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@unique([farmaciaId, usuarioId])
}

model Indicador {
  id           String                 @id @default(uuid())
  codigo       String                 @unique
  nome         String
  categoria    String
  unidade      String
  metaPadrao   String
  temImpacto   Boolean                @default(false)
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  planosAcao   PlanoAcao[]
  evidencias   Evidencia[]
  relacionados IndicadorRelacionado[] @relation("IndicadorOrigem")
  relacionadoA IndicadorRelacionado[] @relation("IndicadorDestino")
}

model IndicadorRelacionado {
  id                 String    @id @default(uuid())
  indicadorOrigemId  String
  indicadorDestinoId String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  indicadorOrigem    Indicador @relation("IndicadorOrigem", fields: [indicadorOrigemId], references: [id], onDelete: Cascade)
  indicadorDestino   Indicador @relation("IndicadorDestino", fields: [indicadorDestinoId], references: [id], onDelete: Cascade)

  @@unique([indicadorOrigemId, indicadorDestinoId])
}

model PlanoAcao {
  id                  String       @id @default(uuid())
  titulo              String
  descricao           String
  farmaciaId          String
  indicadorId         String
  responsavelId       String
  dataCriacao         DateTime     @default(now())
  prazo               DateTime
  status              String       @default("EM_ANDAMENTO")
  percentualConcluido Int          @default(0)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  farmacia            Farmacia     @relation(fields: [farmaciaId], references: [id], onDelete: Cascade)
  indicador           Indicador    @relation(fields: [indicadorId], references: [id])
  responsavel         Usuario      @relation(fields: [responsavelId], references: [id])
  acoes               Acao[]
  comentarios         Comentario[]
  evidencias          Evidencia[]
}

model Acao {
  id          String    @id @default(uuid())
  descricao   String
  prazo       DateTime
  concluida   Boolean   @default(false)
  atrasada    Boolean   @default(false)
  planoAcaoId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  planoAcao   PlanoAcao @relation(fields: [planoAcaoId], references: [id], onDelete: Cascade)
}

model Comentario {
  id          String    @id @default(uuid())
  texto       String
  data        DateTime  @default(now())
  planoAcaoId String
  usuarioId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  planoAcao   PlanoAcao @relation(fields: [planoAcaoId], references: [id], onDelete: Cascade)
  usuario     Usuario   @relation(fields: [usuarioId], references: [id])
}

model Evidencia {
  id               String                @id @default(uuid())
  url              String
  descricao        String?
  dataCriacao      DateTime              @default(now())
  status           String                @default("PENDENTE")
  dataValidacao    DateTime?
  validadoPorId    String?
  motivoReprovacao String?
  planoId          String
  farmaciaId       String
  indicadorId      String
  usuarioId        String
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  plano            PlanoAcao             @relation(fields: [planoId], references: [id], onDelete: Cascade)
  farmacia         Farmacia              @relation(fields: [farmaciaId], references: [id])
  indicador        Indicador             @relation(fields: [indicadorId], references: [id])
  usuario          Usuario               @relation(fields: [usuarioId], references: [id])
  comentarios      ComentarioEvidencia[]
}

model ComentarioEvidencia {
  id          String    @id @default(uuid())
  texto       String
  data        DateTime  @default(now())
  evidenciaId String
  usuarioId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  evidencia   Evidencia @relation(fields: [evidenciaId], references: [id], onDelete: Cascade)
  usuario     Usuario   @relation(fields: [usuarioId], references: [id])
}

model Medicamento {
  id              String    @id @default(uuid())
  codigo          String
  nome            String
  tipo            String
  ultimaCompra    DateTime
  proximaCompra   DateTime
  duracaoDias     Int
  lembreteEnviado Boolean   @default(false)
  farmaciaId      String
  clienteId       String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  farmacia        Farmacia  @relation(fields: [farmaciaId], references: [id], onDelete: Cascade)
  cliente         Cliente   @relation(fields: [clienteId], references: [id])
}

model Cliente {
  id           String        @id @default(uuid())
  nome         String
  telefone     String
  email        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  medicamentos Medicamento[]
}